version: '3.8'

services:
  order-db:
    image: mongo:latest
    container_name: order-db
    restart: always
    networks:
      - orchestrator-saga
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=123456
    ports:
      - 27017:27017

  product-db:
    image: postgres:latest
    container_name: product-db
    networks:
      - orchestrator-saga
    environment:
      - POSTGRES_DB=product-db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - 5432:5432

  payment-db:
    image: postgres:latest
    container_name: payment-db
    networks:
      - orchestrator-saga
    environment:
      - POSTGRES_DB=payment-db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - 5433:5432

  inventory-db:
    image: postgres:latest
    container_name: inventory-db
    networks:
      - orchestrator-saga
    environment:
      - POSTGRES_DB=inventory-db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - 5434:5432

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    restart: always
    ports:
      - "2181:2181"
    networks:
      - orchestrator-saga
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    restart: always
    ports:
      - "9092:9092"
    networks:
      - orchestrator-saga
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL: PLAINTEXT
      KAFKA_LISTENERS: "PLAINTEXT://0.0.0.0:9092"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper

  redpanda-console:
    container_name: redpanda
    image: docker.redpanda.com/redpandadata/console:v2.3.8
    restart: always
    ports:
      - "8081:8080"
    networks:
      - orchestrator-saga
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["kafka:9092"]
    depends_on:
      - kafka

  order-service:
    build: './order-service'
    container_name: order-service
    depends_on:
      - order-db
      - kafka
    networks:
      - choreography-saga
    environment:
      - KAFKA_BROKER=kafka:29092
      - MONGO_DB_URI=mongodb://admin:123456@order-db:27017
    ports:
      - 3000:3000

  product-validation-service:
    build: './product-validation-service'
    container_name: product-validation-service
    depends_on:
      - product-db
      - kafka
    networks:
      - choreography-saga
    environment:
      - KAFKA_BROKER=kafka:29092
      - DB_HOST=product-db
      - DB_PORT=5432
      - DB_NAME=product-db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
    ports:
      - 8090:8090


  payment-service:
    build: './payment-service'
    container_name: payment-service
    depends_on:
      - payment-db
      - kafka
    networks:
      - choreography-saga
    environment:
      - KAFKA_BROKER=kafka:29092
      - DB_HOST=payment-db
      - DB_PORT=5432
      - DB_NAME=payment-db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
    ports:
      - 8091:8091

  inventory-service:
    build: './inventory-service'
    container_name: inventory-service
    depends_on:
      - inventory-db
      - kafka
    networks:
      - choreography-saga
    environment:
      - KAFKA_BROKER=kafka:29092
      - DB_HOST=inventory-db
      - DB_PORT=5432
      - DB_NAME=inventory-db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
    ports:
      - 8092:8092

networks:
  orchestrator-saga:
    driver: bridge
